import asyncio

from aiogram import types, Dispatcher

from database import DB
from messages import *
from keyboards import *
from utils.notifications import send_order_notification


async def edit_basket_product_from_products(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É' in callback.data:
        product_id = int(callback.data.replace('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É ', ''))
        asyncio.create_task(DB.add_to_basket(product_id=product_id, user_id=user_id))
        await callback.answer(text='–î–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', show_alert=True)
    else:
        product_id = int(callback.data.replace('–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ', ''))
        asyncio.create_task(DB.remove_from_basket(product_id=product_id, user_id=user_id))
        await callback.answer(text='–£–±—Ä–∞–ª–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', show_alert=True)


async def edit_basket_product_from_basket(message: types.Message):
    user_id = message.from_user.id
    if 'add_id' in message.text:
        product_id = int(message.text.replace('/add_id', ''))
        await DB.add_to_basket(product_id=product_id, user_id=user_id)
    else:
        product_id = int(message.text.replace('/rem_id', ''))
        await DB.remove_from_basket(product_id=product_id, user_id=user_id)

    basket = await DB.get_basket(user_id=user_id)
    await message.answer(text=await get_basket_msg(basket), reply_markup=await get_basket_ikb(basket))


async def clear_basket(callback: types.CallbackQuery):
    asyncio.create_task(DB.clear_basket(user_id=callback.from_user.id))
    await callback.answer(text=f'–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', show_alert=True)
    await callback.message.answer(text=await get_basket_msg(basket=None),
                                  reply_markup=await get_basket_ikb(basket=None))


async def create_order(callback: types.CallbackQuery):
    customer_info = await DB.get_customer_info(user_id=callback.from_user.id)

    if callback.data == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        # IF CUSTOMER INFO EXISTS THEN CREATE ORDER, ELSE NEED TO WRITE CUSTOMER INFO
        if customer_info:
            await callback.answer(text=f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ', show_alert=True)
            await callback.message.answer(text=await get_customer_info_msg(customer_info),
                                          reply_markup=check_customer_info_ikb)
        else:
            await callback.answer('–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è', show_alert=True)
            await callback.message.answer(text=await get_customer_info_msg(customer_info=None),
                                          reply_markup=customer_info_ikb)

    elif callback.data == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑':
        basket = await DB.get_basket(user_id=callback.from_user.id)

        await callback.answer(text=f'–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä', show_alert=True)
        logo_img = types.InputFile('database/logo.png')
        await callback.message.answer_photo(photo=logo_img)
        await callback.message.answer(text='üî¥ –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞. –ï—â—ë —á—Ç–æ-—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ?', reply_markup=main_ikb)
        asyncio.create_task(DB.clear_basket(user_id=callback.from_user.id))

        asyncio.create_task(send_order_notification(order=basket, customer=customer_info, to_telegram=True, to_email=True))


def register_basket_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(callback=edit_basket_product_from_products,
                                       text_startswith=['–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', '–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'])

    dp.register_message_handler(callback=edit_basket_product_from_basket, text_startswith=['/add_id', '/rem_id'])
    dp.register_callback_query_handler(callback=clear_basket, text=['–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'])
    dp.register_callback_query_handler(callback=create_order, text=['–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'])
